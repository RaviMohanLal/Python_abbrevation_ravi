# -*- coding: utf-8 -*-
# python_assign1_final.ipynb

#Automatically generated by Colaboratory.

#Original file is located at
#    https://colab.research.google.com/drive/1l-SGhO6mMt_3oRIUf8wErq3UBqFf_W0h




############################################################

# please uncomment this code since toolz may not have been loaded
#import sys
#import runpy

#sys.argv=["pip", "install", "toolz"]
#runpy.run_module("pip", run_name="__main__")
##############################################################



# defining file path in current directory 
import os
print('Get current working directory : ', os.getcwd())
filename1 = os.getcwd()
filename2 = filename1 + "/trees.txt"
filename2

#saviing trees.txt file into list
filename = filename2;
final_list = []
with open(filename) as file_object:
  u_lines = file_object.readlines()
# removing \n from each word in list
for i in u_lines:
  final_list.append(i.strip())
final_list

"""**Removing apostophie and hyphen, if exists**"""

#we can remove many non-characters
#this instance we are removing hyphen and apostophe
import re
l_replace = [s.replace('-', '') for s in final_list]

l_replace = [s.replace("'", '') for s in l_replace]
l_replace
names_upper = [name.upper() for name in l_replace]
#names are changed into UPPER CASE, since abbreviations should be in upper case
names_upper

"""**List of Key**"""

#List of key values from values.txt

import os
print('Get current working directory : ', os.getcwd())
file_value = os.getcwd()
file_value2 = file_value + "/values.txt"

filename = file_value2
final_list = []
with open(filename) as file_object:
  u_lines = file_object.readlines()

# removing \n from each word in list
for i in u_lines:
  final_list.append(i.strip())
final_list

"""**CONVERT LIST of Values.txt to string**

"""

#converting list of values.txt to string so they can be seperated into two lists
#one containing numbers and other containing letters
string_num = ' '.join(final_list)
#print(string_num)

"""**show numbers only**"""

#these are list of numbers
import re
num_only = re.sub('[A-Z]', ' ', string_num)
strin = num_only.replace("  "," ")
num_only_list = strin.split()
#prints the list given by split()
#print(num_only_list)
num_only_int = [int(x) for x in num_only_list]

"""**show string only in List**"""

#thesse are list of letters
import re
num_only = re.sub('\d+', ' ', string_num)
strin = num_only.replace("  "," ")
string_only_list = strin.split()
print(string_only_list)

"""**show number only in string**


"""

#dictionary of key value pair from values.txt using zip commnad
#zip command with dict creates dictionary with first argument as key 
# and second argument as values

dict_values = dict(zip(string_only_list, num_only_int))
dict_values
dict_values[' '] = 0;
dict_values

"""**changing list of names to list of their characters **"""

# we change each word(tree.txt) into its characters and store in list
lst=[]
list_chars =[]
for i in range(len(names_upper)):
  #lst =[]
  list_chars =[]
  for letter in names_upper[i] :
    list_chars.append(letter)
  
  lst.append(list_chars)
#print(lst)

#possible list of abbreviations from each word
#nested loops one for reading list inside list; other for reading value in each list

ml =[]
for myList in lst:
  l=[]
  j = 0;

  for i in range(len(myList)):
    j = j + 1
    for k in range(j, len(myList)):
      if i+1 == k:
        continue
      l.append(myList[i+1]+myList[k])
  aces = [myList[0] + suit for suit in l]
  ml.append(aces)
#ml contains list of all abbreviation of all words given in trees.txt
print(ml)

"""**Three letter possible combinations**"""

# dictionary of word and its possible abbreviations as value
names_abb = dict(zip(names_upper, ml))

# main scoring logic
from toolz import unique
total =[];
l =[];
add_value = 0;
add_value1 = 0;
# we read dictionary key and its value one by one
for name, abbreviations in names_abb.items():
 #print("rav")
 total=[]
 #print("\n" + name.title() + "'abbreviations are:")
 #print("\t" + name.title())
 if len(name.title().split()) == 1:
   x = name.title()[-1]
   x = x.upper()
   ze = 1;
 else:
   x = name.title()[-1]
   y = name.title().find(' ')
   z = name.title()[y-1]
   x = x.upper()
   z = z.upper()
   ze = 2;
   #print(x,z)
 for abbreviation in abbreviations:
   #print(abbreviation)

# add value 5 if abbreviation has last letter of word and is not E
# also assign value 5 to it
   
   if x  in abbreviation and x  not in abbreviation[0] and ze == 1:
     if abbreviation[1] == x and abbreviation[1] != 'E':
       add_value = 5
# add value 5 if abbreviation has last letter of word and is  E
# also assign value 20 to it
  
     elif abbreviation[1] == x and abbreviation[1] == 'E':
       add_value = 20;
     if abbreviation[2] == x and abbreviation[2] != 'E':
       add_value1 = 5
     if abbreviation[2] == x and abbreviation[2] == 'E':
       add_value1 = 20;
# add value 5 if abbreviation has last letter of word (word consist of two words) and is  E 
# also assign value 20 to it

   elif x or z in abbreviation and x or z not in abbreviation[0] and ze == 2:
     if abbreviation[1] == x and abbreviation[1] != 'E':
       add_value = 5
     elif abbreviation[1] == x and abbreviation[1] == 'E':
       add_value = 20;
     if abbreviation[2] == x and abbreviation[2] != 'E':
       add_value1 = 5
     if abbreviation[2] == x and abbreviation[2] == 'E':
       add_value1 = 20;

# addiing scores according to logic provided
   if abbreviation[1] in dict_values and abbreviation[2] in dict_values and (abbreviation[1] !=x  or abbreviation[1] !=z) and abbreviation[2] !=x :
      add_char = dict_values[abbreviation[1]] + 1 + dict_values[abbreviation[2]] + 2;
      #total.append(add_char)
   elif abbreviation[2] == x and (abbreviation[1] !=x  or abbreviation[1] !=z) :
     
     add_char = dict_values[abbreviation[1]] + 1 + add_value1;
     # total.append(add_char)
   elif abbreviation[1] == x and (abbreviation[2] !=x  or abbreviation[2] !=z) :
     add_char = dict_values[abbreviation[2]] + 2 + add_value;
     
   else:
     add_char = 0
     add_value = 0;
     add_value1 = 0;
   total.append(add_char)
   #print(total)
   l.append(total)
   
   add_char = 0;
   add_value = 0;
   add_value1 = 0;
#l.append(total)
#l.append(total)
#print(l)
res = map(list, unique(map(tuple, l)))

# l consist of list of scores for each abbreviaiton of every word
l = list(res)
print(l)

a =[]
b=[]
c=[]
for i in range(len(l)):
  a = [min(l[i])]
  b.append(a)

dict_values_final = dict(zip(names_upper, b))

#dict_values_final contains words and their minimum scores
print(dict_values_final)

print("ravi")
